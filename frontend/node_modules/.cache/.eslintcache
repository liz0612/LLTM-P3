[{"/Users/liz/Desktop/LLTM-P3/frontend/src/index.js":"1","/Users/liz/Desktop/LLTM-P3/frontend/src/App.js":"2","/Users/liz/Desktop/LLTM-P3/frontend/src/Pages/Avatar/setAvatar.js":"3","/Users/liz/Desktop/LLTM-P3/frontend/src/Pages/Auth/Login.js":"4","/Users/liz/Desktop/LLTM-P3/frontend/src/Pages/Auth/Register.js":"5","/Users/liz/Desktop/LLTM-P3/frontend/src/Pages/Home/Home.js":"6","/Users/liz/Desktop/LLTM-P3/frontend/src/utils/ApiRequest.js":"7","/Users/liz/Desktop/LLTM-P3/frontend/src/Pages/Home/TableData.js":"8","/Users/liz/Desktop/LLTM-P3/frontend/src/Pages/Home/Analytics.js":"9","/Users/liz/Desktop/LLTM-P3/frontend/src/components/Header.js":"10","/Users/liz/Desktop/LLTM-P3/frontend/src/components/Spinner.js":"11","/Users/liz/Desktop/LLTM-P3/frontend/src/components/LineProgressBar.js":"12","/Users/liz/Desktop/LLTM-P3/frontend/src/components/CircularProgressBar.js":"13"},{"size":343,"mtime":1742253053707,"results":"14","hashOfConfig":"15"},{"size":750,"mtime":1742253053674,"results":"16","hashOfConfig":"15"},{"size":8324,"mtime":1742253053676,"results":"17","hashOfConfig":"15"},{"size":6081,"mtime":1742429926048,"results":"18","hashOfConfig":"19"},{"size":8730,"mtime":1742428101784,"results":"20","hashOfConfig":"15"},{"size":13242,"mtime":1742253053682,"results":"21","hashOfConfig":"15"},{"size":531,"mtime":1742253053709,"results":"22","hashOfConfig":"15"},{"size":10164,"mtime":1742253053683,"results":"23","hashOfConfig":"15"},{"size":6731,"mtime":1742253053681,"results":"24","hashOfConfig":"15"},{"size":4132,"mtime":1742253053704,"results":"25","hashOfConfig":"15"},{"size":431,"mtime":1742253053706,"results":"26","hashOfConfig":"15"},{"size":761,"mtime":1742253053705,"results":"27","hashOfConfig":"15"},{"size":1168,"mtime":1742253053704,"results":"28","hashOfConfig":"15"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1m8qnhb",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13tprae",{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/liz/Desktop/LLTM-P3/frontend/src/index.js",[],[],"/Users/liz/Desktop/LLTM-P3/frontend/src/App.js",[],[],"/Users/liz/Desktop/LLTM-P3/frontend/src/Pages/Avatar/setAvatar.js",["70"],[],"import React, { useState, useEffect, useCallback } from \"react\";\n\nimport { useNavigate } from \"react-router-dom\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport axios from \"axios\";\nimport spinner from \"../../assets/gg.gif\";\nimport \"./avatar.css\";\nimport { Button } from \"react-bootstrap\";\nimport { setAvatarAPI } from \"../../utils/ApiRequest.js\";\nimport Particles from \"react-tsparticles\";\nimport { loadFull } from \"tsparticles\";\n\n// import Buffer from \"buffer\";\nconst {\n  uniqueNamesGenerator,\n  colors,\n  animals,\n  countries,\n  names,\n  languages,\n} = require(\"unique-names-generator\");\n\nconst SetAvatar = () => {\n  const sprites = [\n    \"adventurer\",\n    \"micah\",\n    \"avataaars\",\n    \"bottts\",\n    \"initials\",\n    \"adventurer-neutral\",\n    \"big-ears\",\n    \"big-ears-neutral\",\n    \"big-smile\",\n    \"croodles\",\n    \"identicon\",\n    \"miniavs\",\n    \"open-peeps\",\n    \"personas\",\n    \"pixel-art\",\n    \"pixel-art-neutral\",\n    \"identicon\",\n  ];\n\n  const toastOptions = {\n    position: \"bottom-right\",\n    autoClose: 2000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: false,\n    draggable: true,\n    progress: undefined,\n    theme: \"dark\",\n  };\n\n  const navigate = useNavigate();\n\n  const [selectedAvatar, setSelectedAvatar] = useState(undefined);\n  const [loading, setLoading] = useState(false);\n  const [selectedSprite, setSelectedSprite] = React.useState(sprites[0]);\n\n  useEffect(() => {\n    if (!localStorage.getItem(\"user\")) {\n      navigate(\"/login\");\n    }\n  }, [navigate]);\n\n  const randomName = () => {\n    let shortName = uniqueNamesGenerator({\n      dictionaries: [animals, colors, countries, names, languages], // colors can be omitted here as not used\n      length: 2,\n    });\n    // console.log(shortName);\n\n    return shortName;\n  };\n\n  const [imgURL, setImgURL] = React.useState([\n    `https://api.dicebear.com/7.x/${sprites[0]}/svg?seed=${randomName()}`,\n    `https://api.dicebear.com/7.x/${sprites[0]}/svg?seed=${randomName()}`,\n    `https://api.dicebear.com/7.x/${sprites[0]}/svg?seed=${randomName()}`,\n    `https://api.dicebear.com/7.x/${sprites[0]}/svg?seed=${randomName()}`,\n  ]);\n\n  const handleSpriteChange = (e) => {\n    setSelectedSprite(() => {\n      if (e.target.value.length > 0) {\n        setLoading(true);\n        const imgData = [];\n        for (let i = 0; i < 4; i++) {\n          imgData.push(\n            `https://api.dicebear.com/7.x/${\n              e.target.value\n            }/svg?seed=${randomName()}`\n          );\n        }\n\n        setImgURL(imgData);\n        // console.log(imgData);\n        setLoading(false);\n      }\n\n      return e.target.value;\n    });\n  };\n\n  const setProfilePicture = async () => {\n    if (selectedAvatar === undefined) {\n      toast.error(\"Please select an avatar\", toastOptions);\n    } else {\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      // console.log(user);\n\n      const { data } = await axios.post(`${setAvatarAPI}/${user._id}`, {\n        image: imgURL[selectedAvatar],\n      });\n\n      if (data.isSet) {\n        user.isAvatarImageSet = true;\n        user.avatarImage = data.image;\n        localStorage.setItem(\"user\", JSON.stringify(user));\n        toast.success(\"Avatar selected successfully\", toastOptions);\n        navigate(\"/\");\n      } else {\n        toast.error(\"Error Setting avatar, Please Try again\", toastOptions);\n      }\n    }\n  };\n\n  const particlesInit = useCallback(async (engine) => {\n    // console.log(engine);\n    await loadFull(engine);\n  }, []);\n\n  const particlesLoaded = useCallback(async (container) => {\n    // await console.log(container);\n  }, []);\n\n  return (\n    <>\n      <div style={{ position: \"relative\", overflow: \"hidden\" }}>\n        <Particles\n          id=\"tsparticles\"\n          init={particlesInit}\n          loaded={particlesLoaded}\n          options={{\n            background: {\n              color: {\n                value: \"#000\",\n              },\n            },\n            fpsLimit: 60,\n            particles: {\n              number: {\n                value: 200,\n                density: {\n                  enable: true,\n                  value_area: 800,\n                },\n              },\n              color: {\n                value: \"#ffcc00\",\n              },\n              shape: {\n                type: \"circle\",\n              },\n              opacity: {\n                value: 0.5,\n                random: true,\n              },\n              size: {\n                value: 3,\n                random: { enable: true, minimumValue: 1 },\n              },\n              links: {\n                enable: false,\n              },\n              move: {\n                enable: true,\n                speed: 2,\n              },\n              life: {\n                duration: {\n                  sync: false,\n                  value: 3,\n                },\n                count: 0,\n                delay: {\n                  random: {\n                    enable: true,\n                    minimumValue: 0.5,\n                  },\n                  value: 1,\n                },\n              },\n            },\n            detectRetina: true,\n          }}\n          style={{\n            position: \"absolute\",\n            zIndex: -1,\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n          }}\n        />\n\n        {loading === true ? (\n          <>\n            {/* <Container></Container> */}\n            <div\n              className=\"container containerBox\"\n              h={\"100vh\"}\n              style={{ position: \"relative\", zIndex: \"2 !important\" }}\n            >\n              <div className=\"avatarBox\">\n                <image src={spinner} alt=\"Loading\"></image>\n              </div>\n            </div>\n          </>\n        ) : (\n          <>\n            <div\n              className=\"container containerBox\"\n              style={{ position: \"relative\", zIndex: \"2 !important\" }}\n            >\n              <div className=\"avatarBox\">\n                <h1 className=\"text-center text-white mt-5\">\n                  Choose Your Avatar\n                </h1>\n                {/* <div className=\"imgBox\">\n                        \n                        {imgURL.map((image, index)=> {\n\n                            console.log(image);\n                            return(\n                                <img key={index} src={image} alt=\"\" className={`avatar ${selectedAvatar === index ? \"selected\" : \"\"} img-circle imgAvatar`} onClick={() => setSelectedAvatar(index)} width=\"250px\" height=\"250px\"/>\n                            )\n                        })}\n                            \n                        \n\n                    </div> */}\n                <div className=\"container\">\n                  <div className=\"row\">\n                    {imgURL.map((image, index) => {\n                      console.log(image);\n                      return (\n                        <div key={index} className=\"col-lg-3 col-md-6 col-6\">\n                          <img\n                            src={image}\n                            alt=\"\"\n                            className={`avatar ${\n                              selectedAvatar === index ? \"selected\" : \"\"\n                            } img-circle imgAvatar mt-5`}\n                            onClick={() => setSelectedAvatar(index)}\n                            width=\"100%\"\n                            height=\"auto\"\n                          />\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n                <select\n                  onChange={handleSpriteChange}\n                  className=\"form-select mt-5\"\n                >\n                  {sprites.map((sprite, index) => (\n                    <option value={sprite} key={index}>\n                      {sprite}\n                    </option>\n                  ))}\n                </select>\n                <Button\n                  onClick={setProfilePicture}\n                  type=\"submit\"\n                  className=\"mt-5\"\n                >\n                  Set as Profile Picture\n                </Button>\n              </div>\n\n              <ToastContainer />\n            </div>\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default SetAvatar;\n","/Users/liz/Desktop/LLTM-P3/frontend/src/Pages/Auth/Login.js",[],[],"/Users/liz/Desktop/LLTM-P3/frontend/src/Pages/Auth/Register.js",[],[],"/Users/liz/Desktop/LLTM-P3/frontend/src/Pages/Home/Home.js",["71"],[],"import React, { useEffect, useState } from \"react\";\nimport Header from \"../../components/Header\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Button, Modal, Form, Container } from \"react-bootstrap\";\n// import loading from \"../../assets/loader.gif\";\nimport \"./home.css\";\nimport { addTransaction, getTransactions } from \"../../utils/ApiRequest\";\nimport axios from \"axios\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Spinner from \"../../components/Spinner\";\nimport TableData from \"./TableData\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport FormatListBulletedIcon from \"@mui/icons-material/FormatListBulleted\";\nimport BarChartIcon from \"@mui/icons-material/BarChart\";\nimport Analytics from \"./Analytics\";\n\nconst Home = () => {\n  const navigate = useNavigate();\n\n  const toastOptions = {\n    position: \"bottom-right\",\n    autoClose: 2000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: false,\n    draggable: true,\n    progress: undefined,\n    theme: \"dark\",\n  };\n  const [cUser, setcUser] = useState();\n  const [show, setShow] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [transactions, setTransactions] = useState([]);\n  const [refresh, setRefresh] = useState(false);\n  const [frequency, setFrequency] = useState(\"7\");\n  const [type, setType] = useState(\"all\");\n  const [startDate, setStartDate] = useState(null);\n  const [endDate, setEndDate] = useState(null);\n  const [view, setView] = useState(\"table\");\n\n  const handleStartChange = (date) => {\n    setStartDate(date);\n  };\n\n  const handleEndChange = (date) => {\n    setEndDate(date);\n  };\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  useEffect(() => {\n    const avatarFunc = async () => {\n      if (localStorage.getItem(\"user\")) {\n        const user = JSON.parse(localStorage.getItem(\"user\"));\n        console.log(user);\n\n        if (user.isAvatarImageSet === false || user.avatarImage === \"\") {\n          navigate(\"/setAvatar\");\n        }\n        setcUser(user);\n        setRefresh(true);\n      } else {\n        navigate(\"/login\");\n      }\n    };\n\n    avatarFunc();\n  }, [navigate]);\n\n  const [values, setValues] = useState({\n    title: \"\",\n    amount: \"\",\n    description: \"\",\n    category: \"\",\n    date: \"\",\n    transactionType: \"\",\n  });\n\n  const handleChange = (e) => {\n    setValues({ ...values, [e.target.name]: e.target.value });\n  };\n\n  const handleChangeFrequency = (e) => {\n    setFrequency(e.target.value);\n  };\n\n  const handleSetType = (e) => {\n    setType(e.target.value);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const { title, amount, description, category, date, transactionType } =\n      values;\n\n    if (\n      !title ||\n      !amount ||\n      !description ||\n      !category ||\n      !date ||\n      !transactionType\n    ) {\n      toast.error(\"Please enter all the fields\", toastOptions);\n    }\n    setLoading(true);\n\n    const { data } = await axios.post(addTransaction, {\n      title: title,\n      amount: amount,\n      description: description,\n      category: category,\n      date: date,\n      transactionType: transactionType,\n      userId: cUser._id,\n    });\n\n    if (data.success === true) {\n      toast.success(data.message, toastOptions);\n      handleClose();\n      setRefresh(!refresh);\n    } else {\n      toast.error(data.message, toastOptions);\n    }\n\n    setLoading(false);\n  };\n\n  const handleReset = () => {\n    setType(\"all\");\n    setStartDate(null);\n    setEndDate(null);\n    setFrequency(\"7\");\n  };\n\n\n  \n\n\n  useEffect(() => {\n\n    const fetchAllTransactions = async () => {\n      try {\n        setLoading(true);\n        console.log(cUser._id, frequency, startDate, endDate, type);\n        const { data } = await axios.post(getTransactions, {\n          userId: cUser._id,\n          frequency: frequency,\n          startDate: startDate,\n          endDate: endDate,\n          type: type,\n        });\n        console.log(data);\n  \n        setTransactions(data.transactions);\n  \n        setLoading(false);\n      } catch (err) {\n        // toast.error(\"Error please Try again...\", toastOptions);\n        setLoading(false);\n      }\n    };\n\n    fetchAllTransactions();\n  }, [refresh, frequency, endDate, type, startDate]);\n\n  const handleTableClick = (e) => {\n    setView(\"table\");\n  };\n\n  const handleChartClick = (e) => {\n    setView(\"chart\");\n  };\n\n  return (\n    <>\n      <Header />\n\n      {loading ? (\n        <>\n          <Spinner />\n        </>\n      ) : (\n        <>\n          <Container\n            style={{ position: \"relative\", zIndex: \"2 !important\" }}\n            className=\"mt-3\"\n          >\n            <div className=\"filterRow\">\n              <div className=\"text-white\">\n                <Form.Group className=\"mb-3\" controlId=\"formSelectFrequency\">\n                  <Form.Label>Select Frequency</Form.Label>\n                  <Form.Select\n                    name=\"frequency\"\n                    value={frequency}\n                    onChange={handleChangeFrequency}\n                  >\n                    <option value=\"7\">Last Week</option>\n                    <option value=\"30\">Last Month</option>\n                    <option value=\"365\">Last Year</option>\n                    <option value=\"custom\">Custom</option>\n                  </Form.Select>\n                </Form.Group>\n              </div>\n\n              <div className=\"text-white type\">\n                <Form.Group className=\"mb-3\" controlId=\"formSelectFrequency\">\n                  <Form.Label>Type</Form.Label>\n                  <Form.Select\n                    name=\"type\"\n                    value={type}\n                    onChange={handleSetType}\n                  >\n                    <option value=\"all\">All</option>\n                    <option value=\"expense\">Expense</option>\n                    <option value=\"credit\">Earned</option>\n                  </Form.Select>\n                </Form.Group>\n              </div>\n\n              <div className=\"text-white iconBtnBox\">\n                <FormatListBulletedIcon\n                  sx={{ cursor: \"pointer\" }}\n                  onClick={handleTableClick}\n                  className={`${\n                    view === \"table\" ? \"iconActive\" : \"iconDeactive\"\n                  }`}\n                />\n                <BarChartIcon\n                  sx={{ cursor: \"pointer\" }}\n                  onClick={handleChartClick}\n                  className={`${\n                    view === \"chart\" ? \"iconActive\" : \"iconDeactive\"\n                  }`}\n                />\n              </div>\n\n              <div>\n                <Button onClick={handleShow} className=\"addNew\">\n                  Add New\n                </Button>\n                <Button onClick={handleShow} className=\"mobileBtn\">\n                  +\n                </Button>\n                <Modal show={show} onHide={handleClose} centered>\n                  <Modal.Header closeButton>\n                    <Modal.Title>Add Transaction Details</Modal.Title>\n                  </Modal.Header>\n                  <Modal.Body>\n                    <Form>\n                      <Form.Group className=\"mb-3\" controlId=\"formName\">\n                        <Form.Label>Title</Form.Label>\n                        <Form.Control\n                          name=\"title\"\n                          type=\"text\"\n                          placeholder=\"Enter Transaction Name\"\n                          value={values.name}\n                          onChange={handleChange}\n                        />\n                      </Form.Group>\n\n                      <Form.Group className=\"mb-3\" controlId=\"formAmount\">\n                        <Form.Label>Amount</Form.Label>\n                        <Form.Control\n                          name=\"amount\"\n                          type=\"number\"\n                          placeholder=\"Enter your Amount\"\n                          value={values.amount}\n                          onChange={handleChange}\n                        />\n                      </Form.Group>\n\n                      <Form.Group className=\"mb-3\" controlId=\"formSelect\">\n                        <Form.Label>Category</Form.Label>\n                        <Form.Select\n                          name=\"category\"\n                          value={values.category}\n                          onChange={handleChange}\n                        >\n                          <option value=\"\">Choose...</option>\n                          <option value=\"Groceries\">Groceries</option>\n                          <option value=\"Rent\">Rent</option>\n                          <option value=\"Salary\">Salary</option>\n                          <option value=\"Tip\">Tip</option>\n                          <option value=\"Food\">Food</option>\n                          <option value=\"Medical\">Medical</option>\n                          <option value=\"Utilities\">Utilities</option>\n                          <option value=\"Entertainment\">Entertainment</option>\n                          <option value=\"Transportation\">Transportation</option>\n                          <option value=\"Other\">Other</option>\n                        </Form.Select>\n                      </Form.Group>\n\n                      <Form.Group className=\"mb-3\" controlId=\"formDescription\">\n                        <Form.Label>Description</Form.Label>\n                        <Form.Control\n                          type=\"text\"\n                          name=\"description\"\n                          placeholder=\"Enter Description\"\n                          value={values.description}\n                          onChange={handleChange}\n                        />\n                      </Form.Group>\n\n                      <Form.Group className=\"mb-3\" controlId=\"formSelect1\">\n                        <Form.Label>Transaction Type</Form.Label>\n                        <Form.Select\n                          name=\"transactionType\"\n                          value={values.transactionType}\n                          onChange={handleChange}\n                        >\n                          <option value=\"\">Choose...</option>\n                          <option value=\"credit\">Credit</option>\n                          <option value=\"expense\">Expense</option>\n                        </Form.Select>\n                      </Form.Group>\n\n                      <Form.Group className=\"mb-3\" controlId=\"formDate\">\n                        <Form.Label>Date</Form.Label>\n                        <Form.Control\n                          type=\"date\"\n                          name=\"date\"\n                          value={values.date}\n                          onChange={handleChange}\n                        />\n                      </Form.Group>\n\n                      {/* Add more form inputs as needed */}\n                    </Form>\n                  </Modal.Body>\n                  <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                      Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={handleSubmit}>\n                      Submit\n                    </Button>\n                  </Modal.Footer>\n                </Modal>\n              </div>\n            </div>\n            <br style={{ color: \"white\" }}></br>\n\n            {frequency === \"custom\" ? (\n              <>\n                <div className=\"date\">\n                  <div className=\"form-group\">\n                    <label htmlFor=\"startDate\" className=\"text-white\">\n                      Start Date:\n                    </label>\n                    <div>\n                      <DatePicker\n                        selected={startDate}\n                        onChange={handleStartChange}\n                        selectsStart\n                        startDate={startDate}\n                        endDate={endDate}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"endDate\" className=\"text-white\">\n                      End Date:\n                    </label>\n                    <div>\n                      <DatePicker\n                        selected={endDate}\n                        onChange={handleEndChange}\n                        selectsEnd\n                        startDate={startDate}\n                        endDate={endDate}\n                        minDate={startDate}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </>\n            ) : (\n              <></>\n            )}\n\n            <div className=\"containerBtn\">\n              <Button variant=\"primary\" onClick={handleReset}>\n                Reset Filter\n              </Button>\n            </div>\n            {view === \"table\" ? (\n              <>\n                <TableData data={transactions} user={cUser} />\n              </>\n            ) : (\n              <>\n                <Analytics transactions={transactions} user={cUser} />\n              </>\n            )}\n            <ToastContainer />\n          </Container>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Home;\n","/Users/liz/Desktop/LLTM-P3/frontend/src/utils/ApiRequest.js",[],[],"/Users/liz/Desktop/LLTM-P3/frontend/src/Pages/Home/TableData.js",[],[],"/Users/liz/Desktop/LLTM-P3/frontend/src/Pages/Home/Analytics.js",[],[],"/Users/liz/Desktop/LLTM-P3/frontend/src/components/Header.js",[],[],"/Users/liz/Desktop/LLTM-P3/frontend/src/components/Spinner.js",[],[],"/Users/liz/Desktop/LLTM-P3/frontend/src/components/LineProgressBar.js",[],[],"/Users/liz/Desktop/LLTM-P3/frontend/src/components/CircularProgressBar.js",[],[],{"ruleId":"72","severity":1,"message":"73","line":60,"column":10,"nodeType":"74","messageId":"75","endLine":60,"endColumn":24},{"ruleId":"76","severity":1,"message":"77","line":169,"column":6,"nodeType":"78","endLine":169,"endColumn":52,"suggestions":"79"},"no-unused-vars","'selectedSprite' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'cUser._id'. Either include it or remove the dependency array.","ArrayExpression",["80"],{"desc":"81","fix":"82"},"Update the dependencies array to be: [refresh, frequency, endDate, type, startDate, cUser._id]",{"range":"83","text":"84"},[4323,4369],"[refresh, frequency, endDate, type, startDate, cUser._id]"]